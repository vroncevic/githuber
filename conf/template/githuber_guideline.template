${HASH}
${HASH}" Create a new repository on GitHub."
${HASH}
${HASH}" To avoid errors, do not initialize the new repository with README,"
${HASH}" license, or gitignore files. You can add these files after your"
${HASH}" project has been pushed to GitHub. Open Terminal (for Mac and Linux"
${HASH}" users) or the command prompt - CMD (for Windows users). Change the"
${HASH}" current working directory to your local project. Initialize the local"
${HASH}" directory as a Git repository."
${HASH}

"git init"

${HASH}
${HASH}" Add the files in your new local repository. This stages them for the"
${HASH}" first commit."
${HASH}

"git add ."

${HASH}
${HASH}" Adds the files in the local repository and stages them for commit."
${HASH}" To unstage a file, use: 'git reset HEAD YOUR-FILE'. Commit the files"
${HASH}" that you've staged in your local repository."
${HASH}

"git commit -m \"First commit\""

${HASH}
${HASH}" Commits the tracked changes and prepares them to be pushed to a remote"
${HASH}" repository. To remove this commit and modify the file, use:"
${HASH}" 'git reset --soft HEAD~1' and commit and add the file again."
${HASH}" Copy remote repository URL fieldAt the top of your GitHub repository's"
${HASH}" Quick Setup page, click to copy the remote repository URL."
${HASH}" In Terminal, add the URL for the remote repository where your local"
${HASH}" repository will be pushed. Git remote add origin remote repository URL"
${HASH}
${HASH}" Sets the new remote"
${HASH}

"git remote -v"

${HASH}
